name: CI

on:
  pull_request:
    branches: [master]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x, 14.x]
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    steps:
      - uses: actions/checkout@v2
      # - uses: artiomtr/jest-coverage-report-action@v2.0-rc.1
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     # prevent PRs that do not comply with 95% or more
      #     # unit test coverage
      #     threshold: 1
      #     test-script: npm run test:coverage
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: npm ci, build and test
        run: |
          npm ci
          npm run build --if-present
          npm run test:coverage
      - name: Archive code coverage results
        uses: actions/upload-artifact@v2
        with:
          name: code-coverage-report
          path: |
            coverage/lcov.info
            reports/test-report.xml

  # Commented because no sonarqube instance is running
  # sonarqube:
  #   runs-on: ubuntu-latest
  #   needs: test
  #   steps:
  #   - uses: actions/checkout@v2
  #     with:
  #       # Disabling shallow clone is recommended for improving relevancy of reporting
  #       fetch-depth: 0
  #   - name: Download a single artifact
  #     uses: actions/download-artifact@v2
  #     with:
  #       name: code-coverage-report
  #       path: testcoverage
  #   - name: Display structure of downloaded files
  #     run: ls -R
  #     working-directory: testcoverage
  #   # Triggering SonarQube analysis as results of it are required by Quality Gate check
  #   - name: SonarQube Scan
  #     uses: sonarsource/sonarqube-scan-action@master
  #     with:
  #       args: >
  #         -Dsonar.projectKey=sonarjest
  #         -Dsonar.javascript.lcov.reportPaths=testcoverage/coverage/lcov.info
  #         -Dsonar.testExecutionReportPaths=testcoverage/reports/test-report.xml
  #     env:
  #       SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
  #       SONAR_HOST_URL: ${{ secrets.SONARQUBE_HOST }}
  #   - name: SonarQube Quality Gate check
  #     uses: sonarsource/sonarqube-quality-gate-action@master
  #     # Force to fail step after specific time
  #     timeout-minutes: 5
  #     env:
  #      SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
