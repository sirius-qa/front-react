{"version":3,"sources":["components/CustomButton/CustomButton.js","App.js","reportWebVitals.js","index.js"],"names":["CustomButton","children","onClick","props","Button","variant","color","useStyles","makeStyles","root","height","width","display","flexDirection","justifyContent","alignItems","buttonsContainer","marginRight","App","styles","useState","count","setCount","className","type","currentCount","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","CssBaseline","document","getElementById"],"mappings":"4OAgBeA,EAXM,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,QAAYC,EAAzB,wBACnB,cAACC,EAAA,EAAD,yBAAQF,QAASA,EAASG,QAAQ,YAAYC,MAAM,WAAcH,GAAlE,aACGF,MCHCM,EAAYC,aAAW,iBAAO,CAClCC,KAAM,CACJC,OAAQ,QACRC,MAAO,QACPC,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,WAAY,UAEdC,iBAAkB,CAChB,yBAA0B,CACxBC,YAAa,aAwCJC,EAnCH,WACV,IAAMC,EAASZ,IAEf,EAA0Ba,mBAAS,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAcA,OACE,sBAAKC,UAAWJ,EAAOV,KAAvB,UACE,wCAAWY,KACX,sBAAKE,UAAWJ,EAAOH,iBAAvB,UACE,cAAC,EAAD,CAAcQ,KAAK,SAAStB,QAZV,WACtBoB,GAAS,SAACG,GAAD,OAAkBA,EAAe,MAWtC,gBAGA,cAAC,EAAD,CAAcD,KAAK,SAAStB,QAXd,WAClBoB,EAAS,IAUL,mBAGA,cAAC,EAAD,CAAcE,KAAK,SAAStB,QAtBV,WACtBoB,GAAS,SAACG,GAAD,OAAkBA,EAAe,MAqBtC,uBCnCOC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,eAAC,IAAMC,WAAP,WACE,cAACC,EAAA,EAAD,IACA,cAAC,EAAD,OAEFC,SAASC,eAAe,SAM1Bd,M","file":"static/js/main.17bd9de2.chunk.js","sourcesContent":["/* eslint-disable react/jsx-props-no-spreading */\nimport React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport PropTypes from \"prop-types\";\n\nconst CustomButton = ({ children, onClick, ...props }) => (\n  <Button onClick={onClick} variant=\"contained\" color=\"primary\" {...props}>\n    {children}\n  </Button>\n);\n\nCustomButton.propTypes = {\n  children: PropTypes.node.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default CustomButton;\n","import { makeStyles } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport CustomButton from \"./components/CustomButton/CustomButton\";\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    height: \"100vh\",\n    width: \"100vw\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  buttonsContainer: {\n    \"& > *:not(:last-child)\": {\n      marginRight: \"1rem\",\n    },\n  },\n}));\n\nconst App = () => {\n  const styles = useStyles();\n\n  const [count, setCount] = useState(0);\n\n  const handleIncrement = () => {\n    setCount((currentCount) => currentCount + 1);\n  };\n\n  const handleDecrement = () => {\n    setCount((currentCount) => currentCount - 1);\n  };\n\n  const handleReset = () => {\n    setCount(0);\n  };\n\n  return (\n    <div className={styles.root}>\n      <p>Count: {count}</p>\n      <div className={styles.buttonsContainer}>\n        <CustomButton type=\"button\" onClick={handleDecrement}>\n          -1\n        </CustomButton>\n        <CustomButton type=\"button\" onClick={handleReset}>\n          Reset\n        </CustomButton>\n        <CustomButton type=\"button\" onClick={handleIncrement}>\n          +1\n        </CustomButton>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { CssBaseline } from \"@material-ui/core\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}